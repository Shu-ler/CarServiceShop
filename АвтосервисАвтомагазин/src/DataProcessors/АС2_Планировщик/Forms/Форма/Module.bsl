//
//	Филимонов И.В.
//		+7 913 240 81 77
#Область Обработчики_событий_формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//
	//	Установка констант цвета
	//
	ЦветРабочееВремя = WebЦвета.Кремовый;
	ЦветНерабочееВремя = WebЦвета.ТемноСерый;

	ЦветНеСогласован = WebЦвета.Желтый;
	ЦветКОбеспечению = WebЦвета.Аквамарин;
	ЦветКОтгрузке = WebЦвета.Оливковый;
	ЦветВРаботе = WebЦвета.Оранжевый;
	ЦветЗакрыт = WebЦвета.Зеленый;
	
	//
	//	Чтение сохраненных цветов настройки
	//
	ЧтениеНастроекПланировщикаРесурсов();
	
	//
	//	Заполнение легенды
	//
	Элементы.ПолеЦветРабочееВремя.ЦветФона = ЦветРабочееВремя;
	Элементы.ПолеЦветНерабочееВремя.ЦветФона = ЦветНерабочееВремя;
	Элементы.ПолеЦветНеСогласован.ЦветФона = ЦветНеСогласован;
	Элементы.ПолеЦветКОбеспечению.ЦветФона = ЦветКОбеспечению;
	Элементы.ПолеЦветКОтгрузке.ЦветФона = ЦветКОтгрузке;
	Элементы.ПолеЦветВРаботе.ЦветФона = ЦветВРаботе;
	Элементы.ПолеЦветЗакрыт.ЦветФона = ЦветЗакрыт;

	Календарь = ТекущаяДатаСеанса();

	РаботаСТабличнымДокументом();

КонецПроцедуры

#КонецОбласти // Обработчики_событий_формы

#Область Обработчики_событий_элементов_формы

&НаКлиенте
Процедура РабочийКалендарьПриИзменении(Элемент)

	РаботаСТабличнымДокументом();

КонецПроцедуры

&НаКлиенте
Процедура ПланРесурсовВыбор(Элемент, Область, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОбработкаКомандыРедактированияРаботы();

КонецПроцедуры
#КонецОбласти // Обработчики_событий_элементов_формы

#Область Обработчики_команд_формы

#Область Работа_с_расписанием

&НаКлиенте
Процедура РедактироватьРасписание(Команда)

	ОбработкаКомандыРедактированияРаботы();

КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзРасписания(Команда)

	УдалитьИлиПометитьВРаботу("Удалить");

КонецПроцедуры

&НаКлиенте
Процедура ВРаботуОтмена(Команда)

	УдалитьИлиПометитьВРаботу("ВРаботу");

КонецПроцедуры

&НаКлиенте
Процедура УдалитьИлиПометитьВРаботу(Действие)

	Диапазон = ЭтаФорма.ПланРесурсов.ТекущаяОбласть.Имя;

	НайденаРабота = КоллекцияРабот.НайтиСтроки(Новый Структура("ИмяОбласти", Диапазон));

	Если ЗначениеЗаполнено(НайденаРабота) Тогда

		СтруктураЗагрузкиРесурса = СоздатьСтруктуруЗагрузкиРесурса();
		ЗаполнитьЗначенияСвойств(СтруктураЗагрузкиРесурса, НайденаРабота[0]);

		УдалитьИлиПометитьВРаботуСервер(СтруктураЗагрузкиРесурса, Действие);

		РаботаСТабличнымДокументом();

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьИлиПометитьВРаботуСервер(СтруктураЗагрузкиРесурса, Действие)

	ЗаписьВРегистр = РегистрыСведений.АС2_ЗагрузкаРесурсов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьВРегистр, СтруктураЗагрузкиРесурса);

	Если Действие = "Удалить" Тогда
		ЗаписьВРегистр.Удалить();
	ИначеЕсли Действие = "ВРаботу" Тогда
		ЗаписьВРегистр.ВРаботе = Не ЗаписьВРегистр.ВРаботе;
		ЗаписьВРегистр.Записать(Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // Работа_с_расписанием

#Область Настройка_цветовой_схемы

&НаКлиенте
Процедура НастроитьЦветРабочееВремя(Команда)

	ПоказатьДиалогПодбораЦвета("ЦветРабочееВремя");

КонецПроцедуры

&НаКлиенте
Процедура НастроитьЦветНерабочееВремя(Команда)

	ПоказатьДиалогПодбораЦвета("ЦветНерабочееВремя");

КонецПроцедуры

&НаКлиенте
Процедура НастроитьЦветЗаписан(Команда)

	ПоказатьДиалогПодбораЦвета("ЦветНеСогласован");

КонецПроцедуры

&НаКлиенте
Процедура НастроитьЦветКомплектуется(Команда)

	ПоказатьДиалогПодбораЦвета("ЦветКОбеспечению");

КонецПроцедуры

&НаКлиенте
Процедура НастроитьЦветГотовКРаботе(Команда)

	ПоказатьДиалогПодбораЦвета("ЦветКОтгрузке");

КонецПроцедуры

&НаКлиенте
Процедура НастроитьЦветВРаботе(Команда)

	ПоказатьДиалогПодбораЦвета("ЦветКОтгрузке");

КонецПроцедуры

&НаКлиенте
Процедура НастроитьЦветЗавершен(Команда)

	ПоказатьДиалогПодбораЦвета("ЦветЗакрыт");

КонецПроцедуры

#КонецОбласти // Настройка_цветовой_схемы

#Область Прочее

&НаКлиенте
Процедура НастройкаРесурсов(Команда)
	ОткрытьФорму("Справочник.АС2_Ресурсы.Форма.ФормаСписка");
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // Обработчики_команд_формы

#Область Служебные_методы

#Область Заполнение_табличного_документа

&НаСервере
Процедура РаботаСТабличнымДокументом()

	ИнициироватьФорму();
	СформироватьТаблицуНаДень();
	ЗаполнитьТаблицуНаДень();

КонецПроцедуры

&НаСервере
Процедура ИнициироватьФорму()

	КоллекцияРесурсов.Очистить();
	КоллекцияРабот.Очистить();
	ПланРесурсов.Очистить();

	Заголовок = "Планирование ресурсов на " + Формат(Календарь, "ДЛФ=DD");

КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуНаДень() Экспорт

	МакетПланированиеРесурсов = Обработки.АС2_Планировщик.ПолучитьМакет("ТаблоРесурсов");
	
	//
	//	Создание набора областей, занесение области "ШкалаВремени"
	//
	НаборОбластей = Новый Массив;
	НаборОбластей.Добавить(МакетПланированиеРесурсов.ПолучитьОбласть("ШкалаВремени"));

	ПараметрыОбласти = Новый Структура;
	
	//	Получение коллекции ресурсов на день
	НаборРесурсов = Справочники.АС2_Ресурсы.ДоступныеРесурсыНаДату(Календарь);

	//	Время начала и окончания на текущий день
	ВремяНачала = 23;
	ВремяОкончание = 0;
	
	//	Добавление области "Пост" для каждого доступного на актуальную дату ресурса
	НомерРесурса = 0;

	Графики = Новый Массив;

	Для Каждого Эл Из НаборРесурсов Цикл

		ПараметрыОбласти.Очистить();
		ПараметрыОбласти.Вставить("Наименование", Эл.Наименование);
		ПараметрыОбласти.Вставить("Описание", Эл.Описание);
		ПараметрыОбласти.Вставить("Старший", Эл.Сотрудник);

		ОбластьРесурса = МакетПланированиеРесурсов.ПолучитьОбласть("Пост");
		ЗаполнитьЗначенияСвойств(ОбластьРесурса.Параметры, ПараметрыОбласти);
		
		//	Получить расписание для ресурса на день
		Графики.Очистить();
		Графики.Добавить(Эл.Календарь);

		РасписанияРаботы = ГрафикиРаботы.РасписанияРаботыНаПериод(Графики, Календарь, Календарь);

		Если Не ЗначениеЗаполнено(РасписанияРаботы[0].ВремяНачала)
			 Или Не ЗначениеЗаполнено(РасписанияРаботы[0].ВремяОкончания) Тогда
			Продолжить;
		КонецЕсли;

		ВремяНачалаПоста = Час(РасписанияРаботы[0].ВремяНачала);
		ВремяОкончаниеПоста = Час(РасписанияРаботы[0].ВремяОкончания);

		НаборОбластей.Добавить(ОбластьРесурса);
		
		//
		//	Установка границ дня
		//
		ВремяНачала = ?(ВремяНачалаПоста < ВремяНачала, ВремяНачалаПоста, ВремяНачала);
		ВремяОкончание = ?(ВремяОкончаниеПоста > ВремяОкончание, ВремяОкончаниеПоста, ВремяОкончание);
		
		//	Занесение ресурса и колонки ресурса в реквизит КоллекцияРесурсов
		НомерКолонки = НомерРесурса * 2 + 3;

		СтрокаВКоллекцию = КоллекцияРесурсов.Добавить();
		СтрокаВКоллекцию.Номер = НомерКолонки;
		СтрокаВКоллекцию.РесурсСсылка = Эл.Ссылка;
		СтрокаВКоллекцию.Начало = РасписанияРаботы[0].ВремяНачала;
		СтрокаВКоллекцию.Окончание = РасписанияРаботы[0].ВремяОкончания;
		
		//	Изменение цвета нерабочего времени
		Если ВремяНачалаПоста > 1 Тогда

			РабочаяОбласть = СтрШаблон("R%1C%3:R%2C%3", Строка((ВремяНачалаПоста + 1) * 4), Строка(ВремяОкончаниеПоста
																								   * 4
																								   + 3), НомерКолонки);
			РабочаяОбласть = "R"
							 + Строка((ВремяНачалаПоста + 1) * 4)
							 + "C"
							 + НомерКолонки
							 + ":R"
							 + Строка(ВремяОкончаниеПоста * 4 + 3)
							 + "C"
							 + НомерКолонки;

			Эл.РабочаяОбласть = РабочаяОбласть;

		КонецЕсли;

		НомерРесурса = НомерРесурса + 1;

	КонецЦикла;
	
	//
	//	Вывод всех областей из массива
	//
	Для Каждого Эл Из НаборОбластей Цикл
		ПланРесурсов.Вывести(Эл);
	КонецЦикла;
	
	//
	//	Скрытие нерабочего времени, выделение цветом рабочего времени 
	//
	СкрытьНерабочееВремя(ВремяНачала, ВремяОкончание);
	ВыделитьЦветомРабочееВремя(НаборРесурсов);
	
	//
	//	Фиксация шкалы времени и заголовка
	//
	ПланРесурсов.ФиксацияСлева = 2;
	ПланРесурсов.ФиксацияСверху = 3;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНаДень()

	ШаблонСтруктурыЗагрузкиРесурса = РегистрыСведений.АС2_ЗагрузкаРесурсов.СтруктураРеквизитов();
	КоллекцияРаботБуфер = РегистрыСведений.АС2_ЗагрузкаРесурсов.КоллекцияРаботНаДату(Календарь);

	Для Каждого Эл Из КоллекцияРаботБуфер Цикл

		СтруктураЗагрузкиРесурса = Новый Структура(ШаблонСтруктурыЗагрузкиРесурса);
		ЗаполнитьЗначенияСвойств(СтруктураЗагрузкиРесурса, Эл);

		ОформитьЗаписьОРаботе(СтруктураЗагрузкиРесурса);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОформитьЗаписьОРаботе(СтруктураЗагрузкиРесурса)
	
	//
	//	Формирование имени области
	//
	НовоеИмя = "Работа#" + КоллекцияРабот.Количество();
	
	//
	//	Получение области
	//
	КолонкаРесурса = ПолучитьНомерКолонкиРесурса(СтруктураЗагрузкиРесурса);
	ПерваяСтрока = ПолучитьНомерСтрокиРаботы(СтруктураЗагрузкиРесурса);
	ПоследняяСтрока = ПолучитьНомерСтрокиРаботы(СтруктураЗагрузкиРесурса, Ложь);

	ИмяКолонки = "C" + КолонкаРесурса;
	ИмяОбласти = "R" + ПерваяСтрока + ИмяКолонки + ":" + "R" + ПоследняяСтрока + ИмяКолонки;

	АктуальнаяОбласть = ПланРесурсов.Область(ИмяОбласти);
	АктуальнаяОбласть.Имя = НовоеИмя;
	
	//
	//	Занесение в ТЗ КоллекцияРабот
	//
	ЗаписьВТЗ = КоллекцияРабот.Добавить();
	СтруктураЗагрузкиРесурса.ИмяОбласти = НовоеИмя;
	ЗаполнитьЗначенияСвойств(ЗаписьВТЗ, СтруктураЗагрузкиРесурса);
	
	//
	//	Форматирование области
	//
	ТолстаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

	АктуальнаяОбласть.Объединить();
	АктуальнаяОбласть.Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);

	АктуальнаяОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	АктуальнаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;

	АктуальнаяОбласть.СодержитЗначение = Истина;
	АктуальнаяОбласть.Значение = Строка(Час(СтруктураЗагрузкиРесурса.Начало))
								 + ":"
								 + Формат(Минута(СтруктураЗагрузкиРесурса.Начало), "ЧЦ=2; ЧН=00; ЧВН=")
								 + " - "
								 + Строка(Час(СтруктураЗагрузкиРесурса.Окончание))
								 + ":"
								 + Формат(Минута(СтруктураЗагрузкиРесурса.Окончание), "ЧЦ=2; ЧН=00; ЧВН=")
								 + ?(ЗначениеЗаполнено(СтруктураЗагрузкиРесурса.ЗаказКлиента.Партнер),
									 Символы.ПС + СтруктураЗагрузкиРесурса.ЗаказКлиента.Партнер.Наименование,
									 "")
								 + ?(ЗначениеЗаполнено(СтруктураЗагрузкиРесурса.Автомобиль),
									 Символы.ПС + СтруктураЗагрузкиРесурса.Автомобиль.Наименование,
									 "")
								 + ?(ЗначениеЗаполнено(СтруктураЗагрузкиРесурса.Комментарий),
									 Символы.ПС + СтруктураЗагрузкиРесурса.Комментарий,
									 "");
		
		
	//
	//	Обработка статуса работы
	//
	ЦветФонаРаботы = ЦветНеСогласован;
	СостояниеЗаказа = Неопределено;

	Если ЗначениеЗаполнено(СтруктураЗагрузкиРесурса.ЗаказКлиента) Тогда
		СостояниеЗаказа = Документы.ЗаказКлиента.СостояниеЗаказа(СтруктураЗагрузкиРесурса.ЗаказКлиента);
	КонецЕсли;

	Если СтруктураЗагрузкиРесурса.Вработе = Истина Тогда
		ЦветФонаРаботы = ЦветВРаботе;
	ИначеЕсли СостояниеЗаказа <> Неопределено И ЗначениеЗаполнено(СостояниеЗаказа.Состояние) Тогда

		Если СостояниеЗаказа.Состояние = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда
			ЦветФонаРаботы = ЦветЗакрыт;
		ИначеЕсли СостояниеЗаказа.Состояние = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяАвансДоОбеспечения
				  Или СостояниеЗаказа.Состояние = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяОбеспечение
				  Или СостояниеЗаказа.Состояние = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяПредоплатаДоОтгрузки
				  Или СостояниеЗаказа.Состояние = Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению Тогда
			ЦветФонаРаботы = ЦветКОбеспечению;
		ИначеЕсли СостояниеЗаказа.Состояние = Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию
				  Или СостояниеЗаказа.Состояние = Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке
				  Или СостояниеЗаказа.Состояние = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки
				  Или СостояниеЗаказа.Состояние = Перечисления.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки Тогда
			ЦветФонаРаботы = ЦветКОтгрузке;
		КонецЕсли;
	КонецЕсли;

	АктуальнаяОбласть.ЦветФона = ЦветФонаРаботы;

КонецПроцедуры

&НаСервере
Процедура ВыделитьЦветомРабочееВремя(Знач НаборРесурсов)

	Для Каждого Эл Из НаборРесурсов Цикл

		Если ЗначениеЗаполнено(Эл.РабочаяОбласть) Тогда
			ПланРесурсов.Область(Эл.РабочаяОбласть).ЦветФона = ЦветРабочееВремя;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СкрытьНерабочееВремя(Знач ВремяНачала, Знач ВремяОкончание)

	Перем ОбластьСкрытьВечер, ОбластьСкрытьУтро;

	Если ВремяНачала > 1 Тогда
		ОбластьСкрытьУтро = "R4:R" + Строка(ВремяНачала * 4 - 1);
		ПланРесурсов.Область(ОбластьСкрытьУтро).Видимость = Ложь;
	КонецЕсли;

	Если ВремяОкончание < 23 Тогда
		ОбластьСкрытьВечер = "R" + Строка((ВремяОкончание + 2) * 4) + ":R99";
		ПланРесурсов.Область(ОбластьСкрытьВечер).Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти	//	Заполнение_табличного_документа

#Область Обработки_команды_редактирования_области

&НаКлиенте
Процедура ОбработкаКомандыРедактированияРаботы()

	ЦветДоступного = ЦветРабочееВремя;

	ПараметрыВызова = СоздатьСтруктуруЗагрузкиРесурса();
	ПараметрыВызова.Вставить("КоллекцияРесурсов", КоллекцияРесурсов);

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗавершениеРедактированияРасписания", ЭтаФорма);

	Диапазон = ЭтаФорма.ПланРесурсов.ТекущаяОбласть.Имя;
	ЦветКОтгрузке = ЭтаФорма.ПланРесурсов.ТекущаяОбласть.ЦветФона;

	НайденаРабота = КоллекцияРабот.НайтиСтроки(Новый Структура("ИмяОбласти", Диапазон));

	Если ЗначениеЗаполнено(НайденаРабота) Тогда
		РаботаРедактировать(НайденаРабота, ПараметрыВызова);
	ИначеЕсли ЦветКОтгрузке = ЦветДоступного Тогда
		РаботаСоздать(Диапазон, ПараметрыВызова);
	Иначе
		Возврат;
	КонецЕсли;

	ОткрытьФормуЗаписиЗагрузкиРесурсов(ОписаниеОповещения, ПараметрыВызова);

КонецПроцедуры

&НаКлиенте
Процедура РаботаСоздать(Знач Диапазон, Знач ПараметрыВызова)

	Периоды = СтрРазделить(Диапазон, ":", Ложь);

	Если Периоды.Количество() = 0 Тогда
		Возврат;
	Иначе 
		//
		//	Получение ссылки на ресурс
		//
		ЧислаПервогоЗначения = СтрРазделить(Периоды[0], "RC", Ложь);
		НайденРесурс = КоллекцияРесурсов.НайтиСтроки(Новый Структура("Номер", Число(ЧислаПервогоЗначения[1])));
		Если Не ЗначениеЗаполнено(НайденРесурс) Тогда
			Возврат;
		КонецЕсли;

		ПараметрыВызова.Вставить("Ресурс", НайденРесурс[0].РесурсСсылка);
		
		//
		//	Получение времени работ
		//
		НомерНачальнойСтроки = Число(ЧислаПервогоЗначения[0]);

		ВремяНачала = ПолучитьВремяПоНомеруСтрокиТаблицы(НомерНачальнойСтроки);
		ВремяОкончания = ПолучитьВремяПоНомеруСтрокиТаблицы(НомерНачальнойСтроки + 1);

		Если Периоды.Количество() > 1 Тогда
			ЧислаВторогоЗначения = СтрРазделить(Периоды[1], "RC", Ложь);
			НомерКонечнойСтроки = Число(ЧислаВторогоЗначения[0]);
			ВремяОкончания = ПолучитьВремяПоНомеруСтрокиТаблицы(НомерКонечнойСтроки + 1);
		КонецЕсли;

	КонецЕсли;

	Начало = Дата(Год(Календарь), Месяц(Календарь), День(Календарь), ВремяНачала.Часы, ВремяНачала.Минуты, 0);

	Окончание = Дата(Год(Календарь), Месяц(Календарь), День(Календарь), ВремяОкончания.Часы, ВремяОкончания.Минуты, 0);

	ПараметрыВызова.Вставить("Начало", Начало);
	ПараметрыВызова.Вставить("Окончание", Окончание);

КонецПроцедуры

&НаКлиенте
Процедура РаботаРедактировать(Знач НайденаРабота, Знач ПараметрыВызова)

	ЗаполнитьЗначенияСвойств(ПараметрыВызова, НайденаРабота[0]);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаписиЗагрузкиРесурсов(Знач ОписаниеОповещения, Знач ПараметрыВызова)

	ОткрытьФорму("РегистрСведений.АС2_ЗагрузкаРесурсов.ФормаЗаписи",
				 ПараметрыВызова,
				 ,
				 ,
				 ,
				 ,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеРедактированияРасписания(РезультатЗакрытия, ДопПараметры) Экспорт

	РаботаСТабличнымДокументом();
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // Обработки_команды_редактирования_области

#Область Настройка_цветовой_схемы

&НаКлиенте
Процедура ПоказатьДиалогПодбораЦвета(ИмяРеквизитаЦвета)

	Перем ДиалогПодбораЦвета, ПараметрыВызова;

	ДиалогПодбораЦвета = Новый ДиалогВыбораЦвета;

	ПараметрыВызова = Новый Структура("ДиалогПодбораЦвета", ДиалогПодбораЦвета);
	ПараметрыВызова.Вставить("Приемник", ИмяРеквизитаЦвета);

	ДиалогПодбораЦвета.Показать(Новый ОписаниеОповещения("НастроитьЦветЗавершение", ЭтаФорма, ПараметрыВызова));

КонецПроцедуры

&НаКлиенте
Процедура НастроитьЦветЗавершение(Цвет, ДополнительныеПараметры) Экспорт

	ДиалогПодбораЦвета = ДополнительныеПараметры.ДиалогПодбораЦвета;

	Если (Цвет <> Неопределено) И Цвет <> ЦветРабочееВремя Тогда
		ЭтаФорма[ДополнительныеПараметры.Приемник] = ДиалогПодбораЦвета.Цвет;
	КонецЕсли;

	РаботаСТабличнымДокументом();
	ЭтаФорма.Элементы["Поле" + ДополнительныеПараметры.Приемник].ЦветФона = ДиалогПодбораЦвета.Цвет;
	ЗаписьНастроекПланировщикаРесурсов();

КонецПроцедуры

#КонецОбласти // Настройка_цветовой_схемы

#Область Настройки_планировщика

&НаСервере
Процедура ЧтениеНастроекПланировщикаРесурсов()

	Перем НастройкиОбработки, ТекущийПользователь;

	Возврат;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();

	НастройкиОбработки = РегистрыСведений.КА_НастройкиПланировщикаРесурсов.СоздатьМенеджерЗаписи();
	НастройкиОбработки.Пользователь = ТекущийПользователь;
	НастройкиОбработки.Прочитать();

	Если ЗначениеЗаполнено(НастройкиОбработки.Пользователь) Тогда
		ЦветЗакрыт = НастройкиОбработки.ЦветЗакрыт.Получить();
		ЦветКОбеспечению = НастройкиОбработки.ЦветКОбеспечению.Получить();
		ЦветКОтгрузке = НастройкиОбработки.ЦветКОтгрузке.Получить();
		ЦветНерабочееВремя = НастройкиОбработки.ЦветНерабочееВремя.Получить();
		ЦветНеСогласован = НастройкиОбработки.ЦветНеСогласован.Получить();
		ЦветРабочееВремя = НастройкиОбработки.ЦветРабочееВремя.Получить();
	Иначе
		НастройкиОбработки.Пользователь = ТекущийПользователь;
		НастройкиОбработки.ЦветЗакрыт = Новый ХранилищеЗначения(ЦветЗакрыт);
		НастройкиОбработки.ЦветКОбеспечению = Новый ХранилищеЗначения(ЦветКОбеспечению);
		НастройкиОбработки.ЦветКОтгрузке = Новый ХранилищеЗначения(ЦветКОтгрузке);
		НастройкиОбработки.ЦветНерабочееВремя = Новый ХранилищеЗначения(ЦветНерабочееВремя);
		НастройкиОбработки.ЦветНеСогласован = Новый ХранилищеЗначения(ЦветНеСогласован);
		НастройкиОбработки.ЦветРабочееВремя = Новый ХранилищеЗначения(ЦветРабочееВремя);
		НастройкиОбработки.Записать(Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписьНастроекПланировщикаРесурсов()

	Возврат;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();

	НастройкиОбработки = РегистрыСведений.КА_НастройкиПланировщикаРесурсов.СоздатьМенеджерЗаписи();
	НастройкиОбработки.Пользователь = ТекущийПользователь;
	НастройкиОбработки.ЦветЗакрыт = Новый ХранилищеЗначения(ЦветЗакрыт);
	НастройкиОбработки.ЦветКОбеспечению = Новый ХранилищеЗначения(ЦветКОбеспечению);
	НастройкиОбработки.ЦветКОтгрузке = Новый ХранилищеЗначения(ЦветКОтгрузке);
	НастройкиОбработки.ЦветНерабочееВремя = Новый ХранилищеЗначения(ЦветНерабочееВремя);
	НастройкиОбработки.ЦветНеСогласован = Новый ХранилищеЗначения(ЦветНеСогласован);
	НастройкиОбработки.ЦветРабочееВремя = Новый ХранилищеЗначения(ЦветРабочееВремя);
	НастройкиОбработки.Записать(Истина);

КонецПроцедуры

#КонецОбласти // Настройки_планировщика

#Область Конструкторы

&НаСервереБезКонтекста
Функция СоздатьСтруктуруЗагрузкиРесурса()
	
	Возврат РегистрыСведений.АС2_ЗагрузкаРесурсов.СтруктураРеквизитов();

КонецФункции

#КонецОбласти // Конструкторы

#Область Получение_значений

&НаКлиенте
Функция ПолучитьВремяПоНомеруСтрокиТаблицы(Знач НомерСтрокиТаблицы)

	ШагТаблицы = 15;			// Шаг таблицы в минутах
	ГрадацийЧаса = 4;			// Шагов в часе
	СмещениеЗаголовка = 4;			// Смещение на заголовок

	Время = Новый Структура("Часы, Минуты");
	Время.Часы = Цел((НомерСтрокиТаблицы - СмещениеЗаголовка) / ГрадацийЧаса);
	Время.Минуты = (НомерСтрокиТаблицы - (Время.Часы + 1) * ГрадацийЧаса) * ШагТаблицы;

	Возврат Время;

КонецФункции

&НаСервере
Функция ПолучитьНомерСтрокиРаботы(СтруктураЗагрузкиРесурса, ЭтоПерваяСтрока = Истина)

	ШагТаблицы = 15;			// Шаг таблицы в минутах
	ГрадацийЧаса = 4;			// Шагов в часе
	СмещениеЗаголовка = 4;			// Смещение на заголовок

	ВремяНаРазбор = ?(ЭтоПерваяСтрока, СтруктураЗагрузкиРесурса.Начало, СтруктураЗагрузкиРесурса.Окончание);

	НомерСтроки = Неопределено;

	ВсегоЧасов = Час(ВремяНаРазбор);
	Всего15минуток = Цел(Минута(ВремяНаРазбор) / ШагТаблицы);

	НомерСтроки = СмещениеЗаголовка + ВсегоЧасов * ГрадацийЧаса + Всего15минуток - 1 * (Не ЭтоПерваяСтрока);

	Возврат НомерСтроки;

КонецФункции

&НаСервере
Функция ПолучитьНомерКолонкиРесурса(Знач СтруктураЗагрузкиРесурса)

	КолонкаРесурса = Неопределено;

	ИтогПоискаРесурса = КоллекцияРесурсов.НайтиСтроки(Новый Структура("РесурсСсылка", СтруктураЗагрузкиРесурса.Ресурс));

	Если ЗначениеЗаполнено(ИтогПоискаРесурса) Тогда
		КолонкаРесурса = ИтогПоискаРесурса[0].Номер;
	КонецЕсли;

	Возврат КолонкаРесурса;

КонецФункции

#КонецОбласти // Получение_значений

#КонецОбласти // Область Служебные_методы

