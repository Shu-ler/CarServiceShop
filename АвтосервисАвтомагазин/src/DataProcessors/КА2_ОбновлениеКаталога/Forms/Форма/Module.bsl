// 
//	Аутсорсинг Групп 
//		+7 495 241 10 64
//		+7 3852 59 50 96
//		
//	Филимонов И.В.
//		+7 913 240 81 77
//
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЕстьНекорректныеЗаписиВСправочниках = Справочники.КА2_Марки.Некорректные().Количество() > 0
										  Или Справочники.КА2_Модели.Некорректные().Количество() > 0
										  Или Справочники.КА2_Поколения.Некорректные().Количество() > 0
										  Или Справочники.КА2_Кузова.Некорректные().Количество() > 0
										  Или Справочники.КА2_Модификации.Некорректные().Количество() > 0
										  Или Справочники.КА2_Комплектации.Некорректные().Количество() > 0;

	Элементы.ГруппаОбновлениеНоменклатуры.Доступность = ЕстьКлючиМоделейНаОбновление();

	ЗаполнитьСписокСправочников();

	// Скрыть группу прогресса по номенклатуре
	Элементы.ГруппаИсправлениеОжидание.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РабочийКаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Заголовок = "Выберите каталог";

	Если Диалог.Выбрать() Тогда

		РабочийКаталог = Диалог.Каталог;

		Если Не ПустаяСтрока(РабочийКаталог) Тогда
			ОбработатьСодержимоеКаталога();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)

	Если ЕстьОбъектыДляЗагрузки() Тогда
		
		// "Залепить" кнопку
		Элементы.ФормаЗагрузить.Пометка = Истина;
	
		// Отображение признака длительной операции
		Элементы.ГруппаОжидание.Видимость = Истина;

		// Формирование списка методов обновления
		Для Каждого Справочник Из СправочникиКА Цикл
			ДобавитьВСписокМетодов(Справочник.Значение);
		КонецЦикла;		
		
		// Запуск первого обработчика
		ПодключитьОбработчикОжидания(Методы[0].Значение, 0.5, Истина);

	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНоменклатуру(Команда)
	
	// Отобразить группу прогресса по номенклатуре	
	Элементы.ГруппаИсправлениеОжидание.Видимость = Истина;
	
	ДлительнаяОперация = НачатьОбновлениеНоменклатуры(УникальныйИдентификатор);

	// Подключение обработчика завершения фонового задания.
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПриОбновленииПрогрессаФоновогоЗадания",
																				ЭтотОбъект);

	ОбработкаЗавершения = Новый ОписаниеОповещения("ПриЗавершенииОбновленияНоменклатуры", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКлючи(Команда)
	ОбновитьКлючиНаСервере();
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОжидания

&НаКлиенте
Процедура ЗапуститьЗагрузкуКА2_Типы() Экспорт
	ЗапуститьЗагрузкуОбщее("КА2_Типы");
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЗагрузкуКА2_Марки() Экспорт
	ЗапуститьЗагрузкуОбщее("КА2_Марки");
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЗагрузкуКА2_Модели() Экспорт
	ЗапуститьЗагрузкуОбщее("КА2_Модели");
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЗагрузкуКА2_Поколения() Экспорт
	ЗапуститьЗагрузкуОбщее("КА2_Поколения");
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЗагрузкуКА2_Кузова() Экспорт
	ЗапуститьЗагрузкуОбщее("КА2_Кузова");
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЗагрузкуКА2_Модификации() Экспорт
	ЗапуститьЗагрузкуОбщее("КА2_Модификации");
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЗагрузкуКА2_Комплектации() Экспорт
	ЗапуститьЗагрузкуОбщее("КА2_Комплектации");
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЗагрузкуОбщее(ИмяСправочника) Экспорт

	// Формирование наименования метода из модуля менеджера соответствующего справочника
	ОбработчикОбновления = СтрШаблон("Справочники.%1.Обновить", ИмяСправочника);
	
	// Получение полного имени файла
	ИмяРеквизитаФайла = СтрШаблон("ИмяФайла%1", ИмяСправочника);
	ИмяФайла = ЭтотОбъект[ИмяРеквизитаФайла];

	// Вывод сообщения о загрузке
	ИмяЭлементаСтатуса = СтрШаблон("Статус%1", ИмяСправочника);
	Элементы[ИмяЭлементаСтатуса].Видимость = Истина;

	ДлительнаяОперация = ЗапуститьЗагрузкуНаСервере(ЭтотОбъект.УникальныйИдентификатор, ОбработчикОбновления, ИмяФайла);

	// Подключение обработчика завершения фонового задания.
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииЗагрузки", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);

КонецПроцедуры

// Формирует имя обработчика по имени справочника и запускает его фоновым заданием
// 
// Параметры:
// 	УИДФормы - УникальныйИдентификатор - УИД формы
// 	ОбработчикОбновления - Строка - Наименование обработчика
// 	ИмяФайла - Строка - Полное имя файла обновления
// Возвращаемое значение:
// 	Структура - Описание:
// * АдресРезультата - Строка -
// * ИдентификаторЗадания - Неопределено -
// * Статус - Строка -
&НаСервереБезКонтекста
Функция ЗапуститьЗагрузкуНаСервере(УИДФормы, ОбработчикОбновления, ИмяФайла) Экспорт

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УИДФормы);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ОбработчикОбновления, ИмяФайла);

КонецФункции

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ПриОбновленииПрогрессаФоновогоЗадания(Задание, ДополнительныеПараметры) Экспорт
	Если Задание.Прогресс <> Неопределено Тогда
		ФоновоеЗаданиеПроцент = Задание.Прогресс.Процент;
		ФоновоеЗаданиеСостояние = Задание.Прогресс.Текст;
	КонецЕсли;
КонецПроцедуры

// Завершение загрузки справочника. 
// При успехе снимает галочку, устанавливает статус с количеством записей и ошибок, для последнего обработанного
// справочника - гасит группу длительной операции
// 
// Параметры:
// 	Результат
// 	ДополнительныеПараметры
&НаКлиенте
Процедура ПриЗавершенииЗагрузки(Результат, ДополнительныеПараметры) Экспорт

	// Пользователь отменил задание
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Ошибка выполнения задания
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;

	// Успешное выполнение обновления
	Если Результат.Статус = "Выполнено" Тогда

		РезультатОбновления = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		// Убрать галочку обновления
		ЭтотОбъект["Загружать" + РезультатОбновления.ИмяСправочника] = Ложь;
		
		// Вывести результат обновления справочника
		ЭтотОбъект.Элементы["Статус"
							+ РезультатОбновления.ИмяСправочника].Заголовок = СтрШаблон("Загружено %1, ошибок %2",
																						РезультатОбновления.Загружено,
																						РезультатОбновления.Ошибок);

		// Удаление выполненного обработчика из стека методов и запуск следующего
		Методы.Удалить(0);

		Если Методы.Количество() > 0 Тогда
			ПодключитьОбработчикОжидания(Методы[0].Значение, 0.5, Истина);	// Запуск следующего обработчика
		Иначе
			Элементы.ГруппаОжидание.Видимость = ЕстьОбъектыДляЗагрузки();	// Скрыть группу длительной операции
			Элементы.ФормаЗагрузить.Пометка = Ложь;							// "Отлепть" кнопку
			Элементы.ГруппаОбновлениеНоменклатуры.Доступность = ЕстьКлючиМоделейНаОбновление();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииОбновленияНоменклатуры(Результат, ДополнительныеПараметры) Экспорт

	// Скрыть группу прогресса по номенклатуре
	Элементы.ГруппаИсправлениеОжидание.Видимость = Ложь;

	// Пользователь отменил задание
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Ошибка выполнения задания
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;

	// Успешное выполнение обновления
	Если Результат.Статус = "Выполнено" Тогда

		РезультатОбновления = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		// Вывести результат обновления справочника

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПрочиеМетоды

&НаСервере
Процедура ЗаполнитьСписокСправочников()
	СправочникиКА.Добавить("КА2_Типы");
	СправочникиКА.Добавить("КА2_Марки");
	СправочникиКА.Добавить("КА2_Модели");
	СправочникиКА.Добавить("КА2_Поколения");
	СправочникиКА.Добавить("КА2_Кузова");
	СправочникиКА.Добавить("КА2_Модификации");
	СправочникиКА.Добавить("КА2_Комплектации");
КонецПроцедуры

&НаКлиенте
Функция СоответствиеФайловСправочникам()
	Перем ФайлыПоСправочникам;
	ФайлыПоСправочникам = Новый Соответствие;
	ФайлыПоСправочникам.Вставить("КА2_Типы", "car_type.csv");
	ФайлыПоСправочникам.Вставить("КА2_Марки", "car_mark.csv");
	ФайлыПоСправочникам.Вставить("КА2_Модели", "car_model.csv");
	ФайлыПоСправочникам.Вставить("КА2_Поколения", "car_generation.csv");
	ФайлыПоСправочникам.Вставить("КА2_Кузова", "car_serie.csv");
	ФайлыПоСправочникам.Вставить("КА2_Модификации", "car_modification.csv");
	ФайлыПоСправочникам.Вставить("КА2_Комплектации", "car_equipment.csv");
	Возврат ФайлыПоСправочникам
КонецФункции

// Попытка найти стандартный файл поставки в каталоге поставки
// 
// Параметры:
// 	ИскомоеИмя - Строка - стандартное имя файла
// Возвращаемое значение:
// 	Строка, Неопределено - полный путь к файлу. Если файл не найден - Неопределено
&НаКлиенте
Функция ПолучитьИмяФайлаОбновления(ИскомоеИмя)

	ИмяФайла = СтрШаблон("%1\%2", РабочийКаталог, ИскомоеИмя);

	Файл = Новый Файл(ИмяФайла);

	Если Файл.Существует() Тогда
		Возврат Файл.ПолноеИмя;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ОбработатьСодержимоеКаталога()

	ФайлыПоСправочникам = СоответствиеФайловСправочникам();

	Для Каждого Эл Из СправочникиКА Цикл

		РеквизитИмяФайла = СтрШаблон("ИмяФайла%1", Эл.Значение);
		РеквизитФлаг = СтрШаблон("Загружать%1", Эл.Значение);
		РеквизитСтатус = СтрШаблон("Статус%1", Эл.Значение);
		ИмяГруппы = СтрШаблон("Группа%1", Эл.Значение);
		
		// Установка имени файла
		ЭтотОбъект[РеквизитИмяФайла] = ПолучитьИмяФайлаОбновления(ФайлыПоСправочникам[Эл.Значение]);

		// Установка флага загрузки
		ЭтотОбъект[РеквизитФлаг] = Не ПустаяСтрока(ЭтаФорма[РеквизитИмяФайла]);

		// Установка отображения группы
		Элементы[ИмяГруппы].Видимость = ЭтаФорма[РеквизитФлаг];

		// Установка начального статуса
		Элементы[РеквизитСтатус].Заголовок = "Выполняются загрузка и обновление...";
		Элементы[РеквизитСтатус].Видимость = Ложь;

	КонецЦикла;

КонецПроцедуры

// Возвращает Истина, если не все справочники, предназначенные к обработке, обновлены
// 
// Возвращаемое значение:
// 	Булево - Описание
&НаКлиенте
Функция ЕстьОбъектыДляЗагрузки()

	ЕстьОбъектыДляЗагрузки = ЗагружатьКА2_Типы
							 Или ЗагружатьКА2_Марки
							 Или ЗагружатьКА2_Модели
							 Или ЗагружатьКА2_Поколения
							 Или ЗагружатьКА2_Кузова
							 Или ЗагружатьКА2_Модификации
							 Или ЗагружатьКА2_Комплектации;

	Возврат ЕстьОбъектыДляЗагрузки

КонецФункции

// Добавляет в список обработчиков обработчик для справочника ИмяСправочника при установленном флажке
// 
// Параметры:
// 	ИмяСправочника - Строка - Наименование справочника
// 	
// 	Пример:
// 	ДобавитьВСписокМетодов("КА2_Марки");
&НаКлиенте
Процедура ДобавитьВСписокМетодов(ИмяСправочника)

	ФлагСправочника = СтрШаблон("Загружать%1", ИмяСправочника);

	Если ЭтотОбъект[ФлагСправочника] Тогда

		ИмяОбработки = СтрШаблон("ЗапуститьЗагрузку%1", ИмяСправочника);
		Методы.Добавить(ИмяОбработки);

	КонецЕсли;

КонецПроцедуры

// Возвращает Истина, если есть ключи моделей для обновления
// 
// Возвращаемое значение:
// 	Булево - Описание
&НаСервереБезКонтекста
Функция ЕстьКлючиМоделейНаОбновление()

	Возврат РегистрыСведений.КА2_КлючиМоделейОбновить.КоличествоЗаписей() > 0;

КонецФункции

&НаСервереБезКонтекста
Функция НачатьОбновлениеНоменклатуры(УникальныйИдентификатор) Экспорт

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
												"КА2_КаталогАвтомобилейВызовСервера.ОбновитьНоменклатуруПоКлючам");
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьКлючиНаСервере()
	
	Справочники.КА2_КлючиМоделей.ОбновитьВсе();
	
КонецПроцедуры






#КонецОбласти

#КонецОбласти