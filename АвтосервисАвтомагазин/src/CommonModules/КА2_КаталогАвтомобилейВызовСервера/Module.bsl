// 
//	Аутсорсинг Групп 
//		+7 495 241 10 64
//		+7 3852 59 50 96
//		
//	Филимонов И.В.
//		+7 913 240 81 77
//
#Область ПрограммныйИнтерфейс

// Обновление справочника данными из файла
// 
// Параметры:
// 	ИмяСправочника - Строка - Наименование справочника (к примеру, "КА2_Марки")
// 	ИмяФайла - Строка - Полное наименование файла обновления
// Возвращаемое значение:
// 	Структура - Описание:
// * ИмяСправочника - Строка - Наименование справочника
// * Загружено - Число - Количество обновленных элементов справочника
// * Ошибок - Число - Количество ошибок обновления
// Пример:
// 	ИмяСправочника = Метаданные.Справочники.КА2_Марки.Имя;
//	РезультатОбновления = КА2_СлужебныеВызовСервера.ОбновитьСправочник(ИмяСправочника, "c:\download\car_mark.csv");
Функция ОбновитьСправочник(ИмяСправочника, ИмяФайла) Экспорт

	ИмяСобытияДляЖурналаРегистрации = СтрШаблон("Обновление каталога автомобилей. Обновление справочника %1",
												ИмяСправочника);

	ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Справочники[ИмяСправочника].Представление(),
							 ,
							 "Начало обновления");
	ЭлементовОбновлено = 0;
	ОшибокОбновления = 0;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Чтение файла, занесение содержимого в МВТ и получение запроса
	КА2_СлужебныеВызовСервера.ЗагрузитьCSV(ИмяФайла, ИмяСправочника, "','", Запрос);

	// Выполнение запроса из временной таблицы по тексту, занесенному функцией в Запрос.Текст 
	МассивРезультатов = Запрос.ВыполнитьПакет();

	НаОбновление = МассивРезультатов[0].Выбрать();
	НаОбновлениеКлючей = МассивРезультатов[1].Выбрать();

	// Запись элементов справочника
	Пока НаОбновление.Следующий() Цикл

		ЭтоОбновление = ЗначениеЗаполнено(НаОбновление.Ссылка);

		ОбъектОбновления = ?(ЭтоОбновление,
							 НаОбновление.Ссылка.ПолучитьОбъект(),
							 Справочники[ИмяСправочника].СоздатьЭлемент());

		ОбъектОбновления.Заполнить(ПроизвольныеДанныеВСтруктуру(НаОбновление));

		Попытка
			ОбъектОбновления.Записать();
			ЭлементовОбновлено = ЭлементовОбновлено + 1;
		Исключение
			ОшибокОбновления = ОшибокОбновления + 1;
			ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
									 УровеньЖурналаРегистрации.Ошибка,
									 Метаданные.Справочники[ИмяСправочника],
									 ,
									 СтрШаблон("Ошибка записи элемента с кодом %1", НаОбновление.Код));
		КонецПопытки;

	КонецЦикла;

	// Занесение ссылок в регистр КА2_КлючиМоделейОбновить
	НаборЗаписей = РегистрыСведений.КА2_КлючиМоделейОбновить.СоздатьНаборЗаписей();

	Пока НаОбновлениеКлючей.Следующий() Цикл

		ДобавитьКлючМоделиНаОбновление = НаборЗаписей.Добавить();
		ДобавитьКлючМоделиНаОбновление.КлючМодели = НаОбновлениеКлючей.Ссылка;

	КонецЦикла;

	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать(Истина);
	КонецЕсли;

	ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Справочники[ИмяСправочника],
							 ,
							 СтрШаблон("Завершение обновления. Обновлено %1 записей, ошибок обновления %2",
									   ЭлементовОбновлено,
									   ОшибокОбновления));
	
	// Формирование результата	
	Результат = Новый Структура("ИмяСправочника", ИмяСправочника);
	Результат.Вставить("Загружено", ЭлементовОбновлено);
	Результат.Вставить("Ошибок", ОшибокОбновления);

	Возврат Результат;

КонецФункции

// Возвращает выборку элементов справочника с пустым полем date_create для заданного справочника
// 
// Параметры:
// 	ИмяСправочника - Строка - Наименование справочника
// Возвращаемое значение:
// 	ВыборкаИзРезультатаЗапроса - Описание
Функция КоллекцияНекорректных(ИмяСправочника) Экспорт

	ТекстНаЗамену = "Переопределяемый_КА2";
	ТекстЗапроса = "ВЫБРАТЬ СправочникКА2.Ссылка ИЗ Справочник.Переопределяемый_КА2 КАК СправочникКА2 ГДЕ СправочникКА2.date_create = """"";

	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, ТекстНаЗамену, ИмяСправочника);

	КоллекцияНекорректных = Запрос.Выполнить().Выбрать();

	Возврат КоллекцияНекорректных

КонецФункции

Функция ОбновитьНоменклатуруПоКлючам() Экспорт

	ВсегоПеренести = 0;
	ШагОповещения = 0;

	Успешно = 0;
	Ошибок = 0;

	ТаблицаСвойствИЗначений = ТаблицаСвойствКаталогаАвтомобилей();

	МассивОшибок = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	КА2_МоделиАвтомобилейДляНоменклатуры.Номенклатура КАК Ссылка
				   |ИЗ
				   |	РегистрСведений.КА2_КлючиМоделейОбновить КАК КА2_КлючиМоделейОбновить
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КА2_МоделиАвтомобилейДляНоменклатуры КАК КА2_МоделиАвтомобилейДляНоменклатуры
				   |		ПО КА2_МоделиАвтомобилейДляНоменклатуры.КлючМодели = КА2_КлючиМоделейОбновить.КлючМодели";

	МассивНоменклатуры = Запрос.Выполнить().Выбрать();

	ВсегоПеренести = МассивНоменклатуры.Количество();
	ШаговОповещения = ?(ВсегоПеренести < 10000, 150, 800);

	ШагОповещения = Макс(Окр(ВсегоПеренести / ШаговОповещения, 0), 5);

	ТекстСообщения = СтрШаблон("Обновлено %1 из %2, ошибок обновления %3", Успешно, ВсегоПеренести, Ошибок);
	ДлительныеОперации.СообщитьПрогресс(0, ТекстСообщения);

	Пока МассивНоменклатуры.Следующий() Цикл

		КоллекцияКлючей = Справочники.КА2_КлючиМоделей.НайтиПоНоменклатуре(МассивНоменклатуры.Ссылка);

		Если КоллекцияКлючей.Количество() > 0 Тогда
			СтрокиОтбораИПоиска = КА2_КаталогАвтомобилейВызовСервера.СформироватьСтрокиОтбора(КоллекцияКлючей);
			СтрокаВНаименование = КА2_КаталогАвтомобилейКлиентСервер.СформироватьСтрокуВНаименование(КоллекцияКлючей);
			ТекстПоискаМодели = СтрокиОтбораИПоиска.СДР_Поиск;
			ОтборПоКаталогуАвтомобилей = СтрокиОтбораИПоиска.СДР_КА2_Отбор;
		Иначе
			СтрокаВНаименование = "";
			ТекстПоискаМодели = "";
			ОтборПоКаталогуАвтомобилей = "";
		КонецЕсли;

		ТаблицаСвойствИЗначений[0].Значение = СтрокаВНаименование;
		ТаблицаСвойствИЗначений[1].Значение = ТекстПоискаМодели;
		ТаблицаСвойствИЗначений[2].Значение = ОтборПоКаталогуАвтомобилей;

		Попытка
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(МассивНоменклатуры.Ссылка, ТаблицаСвойствИЗначений);
			Успешно = Успешно + 1;
		Исключение
			МассивОшибок.Добавить(МассивНоменклатуры.Ссылка);
			Ошибок = Ошибок + 1;
		КонецПопытки;
		
		// Информирование о прогрессе
		Если Не (Успешно % ШагОповещения) Тогда
			ТекстСообщения = СтрШаблон("Обновлено %1 из %2, ошибок обновления %3", Успешно, ВсегоПеренести, Ошибок);
			ДлительныеОперации.СообщитьПрогресс(Формат(Успешно / ВсегоПеренести * 100, "ЧЦ=3; ЧДЦ="), ТекстСообщения);
		КонецЕсли;

	КонецЦикла;
	
	// Очистка регистра КА2_КлючиМоделейОбновить
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	КА2_КлючиМоделейОбновить.КлючМодели
				   |ИЗ
				   |	РегистрСведений.КА2_КлючиМоделейОбновить КАК КА2_КлючиМоделейОбновить
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КА2_МоделиАвтомобилейДляНоменклатуры КАК КА2_МоделиАвтомобилейДляНоменклатуры
				   |		ПО КА2_МоделиАвтомобилейДляНоменклатуры.КлючМодели = КА2_КлючиМоделейОбновить.КлючМодели
				   |ГДЕ
				   |	НЕ КА2_МоделиАвтомобилейДляНоменклатуры.Номенклатура В (&КоллекцияНоменклатуры)";
	Запрос.УстановитьПараметр("КоллекцияНоменклатуры", МассивОшибок);

	НаОчистку = Запрос.Выполнить().Выбрать();

	Пока НаОчистку.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.КА2_КлючиМоделейОбновить.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КлючМодели.Установить(НаОчистку.КлючМодели, Истина);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;

	Возврат СтрШаблон("Успешно обновлено %1 записей номенклатуры, ошибок обновления %2", Успешно, Ошибок);

КонецФункции

// Обновляет реквизиты каталога автомобилей у номенклатуры
// 
// Параметры:
// 	Ссылка
// 	КоллекцияКлючей
// Возвращаемое значение:
// 	Булево - Описание
Функция ОбновитьНоменклатуру(Ссылка, КоллекцияКлючей) Экспорт

	ТаблицаСвойствИЗначений = ТаблицаСвойствКаталогаАвтомобилей();

	Если КоллекцияКлючей.Количество() > 0 Тогда
		СтрокиОтбораИПоиска = КА2_КаталогАвтомобилейВызовСервера.СформироватьСтрокиОтбора(КоллекцияКлючей);
		СтрокаВНаименование = КА2_КаталогАвтомобилейКлиентСервер.СформироватьСтрокуВНаименование(КоллекцияКлючей);
		ТекстПоискаМодели = СтрокиОтбораИПоиска.СДР_Поиск;
		ОтборПоКаталогуАвтомобилей = СтрокиОтбораИПоиска.СДР_КА2_Отбор;
	Иначе
		СтрокаВНаименование = "";
		ТекстПоискаМодели = "";
		ОтборПоКаталогуАвтомобилей = "";
	КонецЕсли;

	ТаблицаСвойствИЗначений[0].Значение = СтрокаВНаименование;
	ТаблицаСвойствИЗначений[1].Значение = ТекстПоискаМодели;
	ТаблицаСвойствИЗначений[2].Значение = ОтборПоКаталогуАвтомобилей;

	Попытка
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(Ссылка, ТаблицаСвойствИЗначений);
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Обновляет набор ключей для номенклатуры в справочнике КА2_КлючиМоделей и регистре КА2_МоделиАвтомобилейДляНоменклатуры
// 
// Параметры:
// 	Номенклатура - СправочникСсылка.Номенклатура - Номенклатура 
// 	Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры 
// 	ТаблицаКлючей - 
// 	ЗаписатьНоменклатуру - Булево
// Возвращаемое значение:
// 	Число - Количество ключей
Функция ОбновитьКлючиМоделейДляНоменклатуры(Номенклатура,
											Характеристика,
											Знач ТаблицаКлючей,
											ЗаписатьНоменклатуру = Ложь,
											РежимДобавления = 0) Экспорт

	ВладелецСвязи = Новый Структура("Номенклатура", Номенклатура);
	ВладелецСвязи.Вставить("ХарактеристикаНоменклатуры", Характеристика);

	КлючиНаЗапись = Справочники.КА2_КлючиМоделей.НайтиПоНоменклатуре(Номенклатура, Характеристика);

	Если ЗаписатьНоменклатуру Тогда
		Если РежимДобавления = 1 Тогда
			НомерСтроки = КлючиНаЗапись.Количество() + 1;

			Для Каждого Стр Из ТаблицаКлючей Цикл
				НоваяСтрока = КлючиНаЗапись.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
				НоваяСтрока.Номер = НомерСтроки;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;

		ИначеЕсли РежимДобавления = 2 Тогда
			КэшКлючей = Новый ТаблицаЗначений;
			КэшКлючей = КлючиНаЗапись.Скопировать();
			КлючиНаЗапись.Очистить();
			Для Каждого Стр Из ТаблицаКлючей Цикл
				НоваяСтрока = КлючиНаЗапись.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			КонецЦикла;
			Для Каждого Стр Из КэшКлючей Цикл
				ЗаполнитьЗначенияСвойств(КлючиНаЗапись.Добавить(), Стр);
			КонецЦикла;
		КонецЕсли;
	Иначе
		КлючиНаЗапись.Очистить();
		Для Каждого Стр Из ТаблицаКлючей Цикл
			ЗаполнитьЗначенияСвойств(КлючиНаЗапись.Добавить(), Стр);
		КонецЦикла;
	КонецЕсли;
	
	// Удаление существующих записей регистра	
	ЗаписиРегистра = РегистрыСведений.КА2_МоделиАвтомобилейДляНоменклатуры.СоздатьНаборЗаписей();
	ЗаписиРегистра.Отбор.Номенклатура.Установить(Номенклатура, Истина);
	ЗаписиРегистра.Отбор.ХарактеристикаНоменклатуры.Установить(Характеристика, Истина);
	ЗаписиРегистра.Записать(Истина);
	
	// Обновление ключей для таблицы
	НомерСтроки = 1;
	Для Каждого Ключ Из КлючиНаЗапись Цикл
		
		// Пропуск незаполненных строк 
		Если Не ЗначениеЗаполнено(Ключ.Марка) Тогда
			Продолжить;
		КонецЕсли;
		
		// Поиск или, при необходимости, создание ключа в справочнике КА2_КлючиМоделей
		ПотребныйКлюч = Справочники.КА2_КлючиМоделей.ПолучитьУникальный(Ключ);

		Если ПотребныйКлюч <> Неопределено Тогда
		// Формирование записи в регистр
			НоваяЗапись = ЗаписиРегистра.Добавить();

			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВладелецСвязи);
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Ключ);

			НоваяЗапись.КлючМодели = ПотребныйКлюч.Ссылка;
			НоваяЗапись.Номер = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;

		КонецЕсли;

	КонецЦикла;
	
	// Запись в регистр
	ЗаписиРегистра.Записать(Истина);

	// Запись номенклатуры
	Если ЗаписатьНоменклатуру Тогда
		ОбновитьНоменклатуру(Номенклатура, КлючиНаЗапись);
	КонецЕсли;

	Возврат ЗаписиРегистра.Количество();

КонецФункции

Функция ЗаменитьКлючиМоделей(КлючМодели, Знач ТаблицаКлючей) Экспорт

	Результат = "Ошибка обновления ключей";
	Успешно = 0;

	// Пометка удаления для заменяемого ключа
	КлючМоделиОбъект = КлючМодели.ПолучитьОбъект();
	КлючМоделиОбъект.Наименование = "(не использовать) " + КлючМоделиОбъект.Наименование;
	КлючМоделиОбъект.ПометкаУдаления = Истина;
	КлючМоделиОбъект.ОбменДанными.Загрузка = Истина;
	КлючМоделиОбъект.Записать();
	
	// Чтение существующих записей регистра	
	ЗаписиРегистра = РегистрыСведений.КА2_МоделиАвтомобилейДляНоменклатуры.СоздатьНаборЗаписей();
	ЗаписиРегистра.Отбор.КлючМодели.Установить(КлючМодели, Истина);
	ЗаписиРегистра.Прочитать();

	КлючиНаЗамену = Новый Массив;

	Для Каждого Ключ Из ТаблицаКлючей Цикл
		
		// Пропуск незаполненных строк 
		Если Не ЗначениеЗаполнено(Ключ.Марка) Тогда
			Продолжить;
		КонецЕсли;
		
		// Поиск или, при необходимости, создание ключа в справочнике КА2_КлючиМоделей
		ИскомыйКлюч = Справочники.КА2_КлючиМоделей.ПолучитьУникальный(Ключ);

		Если ИскомыйКлюч <> Неопределено Тогда
			КлючиНаЗамену.Добавить(ИскомыйКлюч);
		КонецЕсли;

	КонецЦикла;

	Если КлючиНаЗамену.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	НачатьТранзакцию();

	Попытка

		Для Каждого Элемент Из ЗаписиРегистра Цикл
			Для Каждого Ключ Из КлючиНаЗамену Цикл
				НоваяЗапись = РегистрыСведений.КА2_МоделиАвтомобилейДляНоменклатуры.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Элемент);
				НоваяЗапись.КлючМодели = Ключ;
				НоваяЗапись.Записать(Истина);
				Успешно = Успешно + 1;
			КонецЦикла;
		КонецЦикла;

		ЗаписиРегистра = РегистрыСведений.КА2_МоделиАвтомобилейДляНоменклатуры.СоздатьНаборЗаписей();
		ЗаписиРегистра.Отбор.КлючМодели.Установить(КлючМодели, Истина);
		ЗаписиРегистра.Записать(Истина);

		Для Каждого Ключ Из КлючиНаЗамену Цикл
			НоваяЗапись = РегистрыСведений.КА2_КлючиМоделейОбновить.СоздатьМенеджерЗаписи();
			НоваяЗапись.КлючМодели = Ключ;
			НоваяЗапись.Записать(Истина);
		КонецЦикла;

		ЗафиксироватьТранзакцию();

		Результат = СтрШаблон("Обновление завершено. Создано %1 исправленных записей", Успешно);

	Исключение

		ОтменитьТранзакцию();

	КонецПопытки;

	Возврат Результат;

КонецФункции

// Формирует строки для отбора и поиска
// 
// Параметры:
// 	ТаблицаДанных
// Возвращаемое значение:
// 	Структура - Описание:
// * СДР_КА2_Отбор - Строка - Строка для отбора в базе
// * СДР_Поиск - Строка - Строка для поиска на сайте
Функция СформироватьСтрокиОтбора(Знач ТаблицаДанных) Экспорт

	СигнатурыОтбора = ПараметрыСеанса.КА2_СигнатурыОтбора;

	ДляФормированияСДР_Поиск = Новый Массив;
	ДляФормированияСДР_КА2_Отбор = Новый Массив;

	ОтборПоСтрокам = Новый Структура("Совместимо", Истина);
	СтрокиТД = ТаблицаДанных.НайтиСтроки(ОтборПоСтрокам);

	// Формирование массива для создания строки ТекстПоискаМодели
	Для Каждого СтрокаТД Из СтрокиТД Цикл

		Если ЗначениеЗаполнено(СтрокаТД.Кузов) Тогда
			ДобавитьКодОтбора(ДляФормированияСДР_Поиск, СтрокаТД.Кузов, СигнатурыОтбора["Кузов"]);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТД.Поколение) Тогда
			ДобавитьКодОтбора(ДляФормированияСДР_Поиск, СтрокаТД.Поколение, СигнатурыОтбора["Поколение"]);
		Иначе
		КонецЕсли;

	КонецЦикла;

	// Формирование массива для создания строки ОтборПоКаталогуАвтомобилей
	Для Каждого СтрокаТД Из СтрокиТД Цикл

		Для Каждого Элемент Из СигнатурыОтбора Цикл
			Если ЗначениеЗаполнено(СтрокаТД[Элемент.Ключ]) Тогда
				ДобавитьКодОтбора(ДляФормированияСДР_КА2_Отбор, СтрокаТД[Элемент.Ключ], Элемент.Значение);
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	// Формирование строк из массивов и структуры результата
	Результат = Новый Структура;
	Результат.Вставить("СДР_Поиск", СтрСоединить(ДляФормированияСДР_Поиск));
	Результат.Вставить("СДР_КА2_Отбор", СтрСоединить(ДляФормированияСДР_КА2_Отбор));

	Возврат Результат;

КонецФункции

// Формирует массив кодов с сигнатурами для отбора в списке номенклатуры
// 
// Параметры:
// 	ТаблицаДанных
// Возвращаемое значение:
// 	Массив - Описание
Функция МассивОтбора(Знач ТаблицаДанных, Расширенный = Ложь) Экспорт

	ДляФормированияСДР_КА2_Отбор = Новый Массив;

	Если Расширенный Тогда
		СигнатурыОтбора = ПараметрыСеанса.КА2_СигнатурыОтбора;

		// Формирование массива для создания строки ОтборПоКаталогуАвтомобилей
		Для Каждого СтрокаТД Из ТаблицаДанных Цикл

			Для Каждого Элемент Из СигнатурыОтбора Цикл
				Если ЗначениеЗаполнено(СтрокаТД[Элемент.Ключ]) Тогда
					ДобавитьКодОтбора(ДляФормированияСДР_КА2_Отбор, СтрокаТД[Элемент.Ключ], Элемент.Значение);
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	Иначе
	
		// Формирование массива для создания строки ТекстПоискаМодели
		Для Каждого СтрокаТД Из ТаблицаДанных Цикл

			Если ЗначениеЗаполнено(СтрокаТД.Кузов) Тогда
				ДобавитьКодОтбора(ДляФормированияСДР_КА2_Отбор, СтрокаТД.Кузов, "К");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТД.Поколение) Тогда
				ДобавитьКодОтбора(ДляФормированияСДР_КА2_Отбор, СтрокаТД.Поколение, "П");
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат ДляФормированияСДР_КА2_Отбор;

КонецФункции

Процедура УстановитьВыделениеСтрок(Знач Строки, Выборка) Экспорт

	ПолеОформления = "Наименование";
	ПараметрОформления = "Шрифт";

	ПолужирныйШрифт = Новый Шрифт(, , Истина); // Создаем новый шрифт Жирный

	Пока Выборка.Следующий() Цикл
		СтрокаСписка = Строки[Выборка.Ссылка];

		Если Выборка.Вхождений > 0 Тогда
			СтрокаСписка.Оформление[ПолеОформления].УстановитьЗначениеПараметра(ПараметрОформления, ПолужирныйШрифт);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция КлючиМоделейПустыеПоля() Экспорт

	ПустыеПоля = Новый Массив;
	НомерСтроки = 0;

	ТЧМетаданные = Метаданные.Обработки.КА2_УправлениеНаборомМоделейДляНоменклатуры.ТабличныеЧасти.КлючиМоделей;

	Для Каждого Реквизит Из ТЧМетаданные.Реквизиты Цикл

		ПустоеЗначение = Реквизит.Тип.ПривестиЗначение();
		Если ТипЗнч(ПустоеЗначение) = Тип("Булево") Тогда
			ПустоеЗначение = Истина;
		КонецЕсли;

		ОписаниеПоля = Новый Структура;
		ОписаниеПоля.Вставить("ИмяПоля", Реквизит.Имя);
		ОписаниеПоля.Вставить("ПустоеЗначение", ПустоеЗначение);
		ОписаниеПоля.Вставить("НомерСтроки", НомерСтроки);

		ПустыеПоля.Добавить(Новый ФиксированнаяСтруктура(ОписаниеПоля));

		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;

	Возврат Новый ФиксированныйМассив(ПустыеПоля)

КонецФункции

// Формирует фиксированную структуру сссылок на дополнительные свойства для записи в параметры сеанса
// 
// Возвращаемое значение:
// 	ФиксированнаяСтруктура - Описание:
// * ПВХМаркиМодели - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения -
// * ПВХОтборПоКаталогуАвтомобилей - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения -
// * ПВХТекстПоискаМодели - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения -
Функция ПВХКаталогАвтомобилей() Экспорт

	// Считывание настроек из хранилища
	ИмяПодсистемы = Метаданные.Подсистемы.КаталогАвтомобилей.Имя;
	КлючНастроек = СтрШаблон("%1ОсновныеНастройки", ИмяПодсистемы);
	ПВХИзХранилища = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяПодсистемы, КлючНастроек);

	ПВХ = Новый Структура;

	Если ПВХИзХранилища <> Неопределено
		 И ПВХИзХранилища.Свойство("ТекстПоискаМодели")
		 И ПВХИзХранилища.Свойство("ОтборПоКаталогуАвтомобилей")
		 И ПВХИзХранилища.Свойство("МаркиМодели") Тогда
		 	
		// Загрузка дополнительных свойств из хранилища
		ПВХ.Вставить("ПВХТекстПоискаМодели", ПВХИзХранилища.ТекстПоискаМодели);
		ПВХ.Вставить("ПВХОтборПоКаталогуАвтомобилей", ПВХИзХранилища.ОтборПоКаталогуАвтомобилей);
		ПВХ.Вставить("ПВХМаркиМодели", ПВХИзХранилища.МаркиМодели);

	Иначе
		
		// Ручной поиск дополнительных свойств
		РеквизитПоиска = "Имя";
		ПВХДопРеквизиты = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;

		ПВХ.Вставить("ПВХТекстПоискаМодели", ПВХДопРеквизиты.НайтиПоРеквизиту(РеквизитПоиска, "СДР_Поиск"));
		ПВХ.Вставить("ПВХОтборПоКаталогуАвтомобилей", ПВХДопРеквизиты.НайтиПоРеквизиту(РеквизитПоиска, "СДР_КА2_Отбор"));
		ПВХ.Вставить("ПВХМаркиМодели", ПВХДопРеквизиты.НайтиПоРеквизиту(РеквизитПоиска, "ДР_МаркиМодели"));

	КонецЕсли;

	Возврат Новый ФиксированнаяСтруктура(ПВХ);

КонецФункции

// Возвращает соответствие сигнатур выделения кодов для элементов ключей моделей
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие ключей и сигнатур
Функция СигнатурыОтбора() Экспорт

	Сигнатуры = Новый Соответствие;
	Сигнатуры.Вставить("Марка", "V");
	Сигнатуры.Вставить("Модель", "X");
	Сигнатуры.Вставить("Поколение", "П");
	Сигнатуры.Вставить("Кузов", "К");
	Сигнатуры.Вставить("Модификация", "Z");
	Сигнатуры.Вставить("Комплектация", "S");

	Возврат Новый ФиксированноеСоответствие(Сигнатуры)

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует код поиска для Ссылка с префиксом и постфиксом Сигнатура и при необходимости добавляет в Массив
// 
// Параметры:
// 	Массив - Массив - Строки отбора номенклатуры
// 	Ссылка - СправочникСсылка.КА2_Поколения, СправочникСсылка.КА2_Кузова, СправочникСсылка.КА2_Модели - Объект для отбора 
// 	Сигнатура - Строка - Строка префикса и постфикса отбора
Функция ДобавитьКодОтбора(Массив, Ссылка, Сигнатура)

	КодЭлементаСтрока = СтрЗаменить(Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Код")), Символы.НПП, "");

	КодОтбора = Сигнатура + КодЭлементаСтрока + Сигнатура;

	Если Массив.Найти(КодОтбора) = Неопределено Тогда
		Массив.Добавить(КодОтбора);
	КонецЕсли;

	Возврат КодОтбора;

КонецФункции

// Преобразовывает данные произвольного набора в структуру
// 
// Параметры:
// 	ПроизвольныеДанные - ВыборкаИзРезультатаЗапроса - Описание
// 	Справочник - Строка, Неопределено - Имя справочника, реквизиты которого будут включены в структуру
// Возвращаемое значение:
// 	Структура - Описание:
// * Код 
// * Наименование 
// * ТипТС 
// * Марка 
// * Модель 
// * Поколение 
// * Кузов 
// * Модификация 
// * Комплектация 
Функция ПроизвольныеДанныеВСтруктуру(ПроизвольныеДанные, Справочник = Неопределено) Экспорт

	Если Справочник = "КА2_КлючиМоделей" Тогда
		Результат = Новый Структура("Код, Наименование,	ТипТС, Марка, Модель, Поколение, Кузов, Модификация, Комплектация");
	Иначе
		Результат = Новый Структура("Код, Наименование, name_rus, year_begin, year_end, id_car_type, id_car_mark, id_car_model, id_car_generation, id_car_serie, id_car_modification, date_create, date_update, price_min, year, start_production_year, end_production_year");
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Результат, ПроизвольныеДанные);

	Возврат Результат;

КонецФункции

Функция ТаблицаСвойствКаталогаАвтомобилей()

	ПВХ = ПараметрыСеанса.КА2_ПВХ;

	ТаблицаСвойствИЗначений = КА2_СлужебныеВызовСервера.ТаблицаСвойствИЗначений();

	Строка1 = ТаблицаСвойствИЗначений.Добавить();
	Строка1.Свойство = ПВХ.ПВХМаркиМодели;

	Строка2 = ТаблицаСвойствИЗначений.Добавить();
	Строка2.Свойство = ПВХ.ПВХТекстПоискаМодели;

	Строка3 = ТаблицаСвойствИЗначений.Добавить();
	Строка3.Свойство = ПВХ.ПВХОтборПоКаталогуАвтомобилей;

	Возврат ТаблицаСвойствИЗначений;

КонецФункции

#КонецОбласти