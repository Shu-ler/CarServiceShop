//		
//	Филимонов И.В.
//		+7 913 240 81 77
//
#Область ПрограммныйИнтерфейс

#Область УстановкаПараметровСеанса

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановкаПараметровСеансаПоляКлючейМоделей(ИмяПараметра, УстановленныеПараметры) Экспорт

	ПараметрыСеанса.КА2_ПоляКлючейМоделей = СоответствияПолейКлючаМодели();

	УстановленныеПараметры.Добавить(ИмяПараметра);

КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановкаПараметровСеансаИмяГруппыФильтра(ИмяПараметра, УстановленныеПараметры) Экспорт

	ИспользоватьСтандартныйПоиск = Константы.ИспользоватьСтандартныйПоискПриПодбореТоваров.Получить();

	ПараметрыСеанса.КА2_ИмяГруппыФильтра = ?(ИспользоватьСтандартныйПоиск,
											 "СтандартныйПоискКоманднаяПанельУстановитьФильтр",
											 "РасширенныйПоискКоманднаяПанельУстановитьФильтр");

	УстановленныеПараметры.Добавить(ИмяПараметра);

КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановкаПараметровСеансаПанельРазмещенияКнопки(ИмяПараметра, УстановленныеПараметры) Экспорт

	ИспользоватьСтандартныйПоиск = Константы.ИспользоватьСтандартныйПоискПриПодбореТоваров.Получить();

	ПараметрыСеанса.КА2_ПанельРазмещенияКнопки = ?(ИспользоватьСтандартныйПоиск,
												   "КаталогАвтомобилей",
												   "ГруппаКомандыСписокРасширенныйПоискНоменклатура");

	УстановленныеПараметры.Добавить(ИмяПараметра);

КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановкаПараметровСеансаКлючиМоделейПустыеПоля(ИмяПараметра, УстановленныеПараметры) Экспорт

	ПараметрыСеанса.КА2_КлючиМоделейПустыеПоля = КА2_КаталогАвтомобилейВызовСервера.КлючиМоделейПустыеПоля();

	УстановленныеПараметры.Добавить(ИмяПараметра);

КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановкаПараметровСеансаПВХ(ИмяПараметра, УстановленныеПараметры) Экспорт

	ПараметрыСеанса.КА2_ПВХ = КА2_КаталогАвтомобилейВызовСервера.ПВХКаталогАвтомобилей();

	УстановленныеПараметры.Добавить(ИмяПараметра);

КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановкаПараметровСеансаСигнатурыОтбора(ИмяПараметра, УстановленныеПараметры) Экспорт

	ПараметрыСеанса.КА2_СигнатурыОтбора = КА2_КаталогАвтомобилейВызовСервера.СигнатурыОтбора();

	УстановленныеПараметры.Добавить(ИмяПараметра);

КонецПроцедуры

// Возвращает соответствие наименования справочника и наименования поля для ссылки элемента справочника
// 
// Возвращаемое значение:
// 	Соответствие - Описание
Функция СоответствияПолейКлючаМодели() Экспорт

	ПоляКлюча = Новый Соответствие;
	ПоляКлюча.Вставить("КА2_Типы", "ТипТС");
	ПоляКлюча.Вставить("КА2_Марки", "Марка");
	ПоляКлюча.Вставить("КА2_Модели", "Модель");
	ПоляКлюча.Вставить("КА2_Поколения", "Поколение");
	ПоляКлюча.Вставить("КА2_Кузова", "Кузов");
	ПоляКлюча.Вставить("КА2_Модификации", "Модификация");
	ПоляКлюча.Вставить("КА2_Комплектации", "Комплектация");
	ПоляКлюча.Вставить("КА2_НаименованияМарок", "МаркаНаименование");
	ПоляКлюча.Вставить("КА2_НаименованияМоделей", "МодельНаименование");

	Возврат Новый ФиксированноеСоответствие(ПоляКлюча)

КонецФункции

#КонецОбласти

// Возвращает таблицу значений, заполненную содержимым CSV файла
// 
// Если передан параметром запрос - добавляет временную таблицу с содержимым файла в запрос и формирует текст запроса 
// для пакетного формирования двух теблиц - для обновления элементов и для добавления элементов
// 
// Параметры:
//	ИмяФайла  - Строка -- полный путь к файлу
// 	Разделитель - Строка - символ или группа символов, служащая разделителем полей в файле (по умолчанию ";")
// 	Запрос - Запрос - запрос, в МВТ которого будет помещена временная таблица с содержимым файла
// 	УдалитьКавычки - Булево - признак удаления кавычек, обрамляющих поля в файле
// 	КорректироватьUNIXПоследовательности - Булево - признак исправления unix-последовательностей
// 	КодировкаФайла - Неопределено - Описание
// Возвращаемое значение:
// 	Неопределено, ТаблицаЗначений - Описание
Функция ЗагрузитьCSV(ИмяФайла,
					 ИмяСправочника = Неопределено,
					 Разделитель = ";",
					 Запрос = Неопределено,
					 УдалитьКавычки = Истина,
					 КорректироватьUNIXПоследовательности = Истина,
					 КодировкаФайла = Неопределено,
					 ИгнорироватьNULL = Истина) Экспорт

	ИмяСобытияДляЖурналаРегистрации = СтрШаблон("Обновление каталога автомобилей. Обновление справочника %1",
												ИмяСправочника);

	ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Справочники[ИмяСправочника],
							 ,
							 СтрШаблон("Начало загрузки файла %1", ИмяФайла));

	ПризнакЧисловойКолонки = "id_car_";

	КодировкаФайла = ?(КодировкаФайла = Неопределено, КодировкаТекста.UTF8, КодировкаФайла);
		
	// Проверка наличия файла
	ПараметрыФайла = Новый Файл(ИмяФайла);
	Если Не ПараметрыФайла.Существует() Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
								 УровеньЖурналаРегистрации.Ошибка,
								 Метаданные.Справочники[ИмяСправочника],
								 ,
								 СтрШаблон("Ошибка чтения файла %1 (файл не найден)", ИмяФайла));
		Возврат Неопределено;
	КонецЕсли;
	
	// Чтение файла
	ИсходныйФайл = Новый ЧтениеТекста;
	ИсходныйФайл.Открыть(ИмяФайла, КодировкаФайла);
	
	// Формирование массива колонок по содержимому первой строки файла
	ТекущаяСтрока = ИсходныйФайл.ПрочитатьСтроку();
	МассивКолонок = СтрВМассив(ТекущаяСтрока, Разделитель, УдалитьКавычки, КорректироватьUNIXПоследовательности, Истина);
	КоличествоКолонок = МассивКолонок.Количество();
	
	// Замена колонки id_car_ИмяФайла на Код
	ИмяКолонкиКод = СтрШаблон("id_%1", ПараметрыФайла.ИмяБезРасширения);
	ИндексКода = МассивКолонок.Найти(ИмяКолонкиКод);
	Если ИндексКода <> Неопределено Тогда
		МассивКолонок[ИндексКода] = "Код";
	Иначе
		ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
								 УровеньЖурналаРегистрации.Ошибка,
								 Метаданные.Справочники[ИмяСправочника],
								 ,
								 СтрШаблон("Ошибка формата файла %1 (не найдена колонка ""%2"")",
										   ИмяФайла,
										   ИмяКолонкиКод));
		Возврат Неопределено;
	КонецЕсли;
	
	// Замена колонки name на Наименование
	ИмяКолонкиНаименование = "name";
	ИндексНаименования = МассивКолонок.Найти(ИмяКолонкиНаименование);
	Если ИндексКода <> Неопределено Тогда
		МассивКолонок[ИндексНаименования] = "Наименование";
	Иначе
		ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
								 УровеньЖурналаРегистрации.Ошибка,
								 Метаданные.Справочники[ИмяСправочника],
								 ,
								 СтрШаблон("Ошибка формата файла %1 (не найдена колонка ""%2"")",
										   ИмяФайла,
										   ИмяКолонкиНаименование));
		Возврат Неопределено;
	КонецЕсли;
	
	//	Создание таблицы значений Результат, добавление колонок
	Результат = Новый ТаблицаЗначений;
	Для Каждого Колонка Из МассивКолонок Цикл
		Если СтрНачинаетсяС(Колонка, ПризнакЧисловойКолонки) Или Колонка = "Код" Тогда
			Результат.Колонки.Добавить(Колонка, Новый ОписаниеТипов("Число"));
		Иначе
			Результат.Колонки.Добавить(Колонка, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(255)));
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение таблицы значений Результат
	ТекущаяСтрока = ИсходныйФайл.ПрочитатьСтроку();
	Пока ТекущаяСтрока <> Неопределено Цикл
		
		// Преобразование строки из файла в массив строк
		МассивПолей = СтрВМассив(ТекущаяСтрока, Разделитель, УдалитьКавычки, КорректироватьUNIXПоследовательности);
		
		// Заполнение таблицы значений
		Если МассивПолей.Количество() = КоличествоКолонок Или МассивПолей.Количество() > КоличествоКолонок Тогда

			СтрокаТаблицы = Результат.Добавить();
			Для Индекс = 0 По КоличествоКолонок - 1 Цикл
				СтрокаТаблицы[МассивКолонок[Индекс]] = МассивПолей[Индекс];
			КонецЦикла;

		Иначе
			ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
									 УровеньЖурналаРегистрации.Ошибка,
									 Метаданные.Справочники[ИмяСправочника],
									 ,
									 СтрШаблон("Ошибка разбора строки файла %1 (%2)", ИмяФайла, ТекущаяСтрока));
		КонецЕсли;

		// Чтение следующей строки из файла
		ТекущаяСтрока = ИсходныйФайл.ПрочитатьСтроку();

	КонецЦикла;
	
	//	Формирование запроса
	Если Запрос <> Неопределено Тогда

		ТекстЗапроса = ТекстЗапросаДляВТ(МассивКолонок, ПараметрыФайла.ИмяБезРасширения);

		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Таб", Результат);
		Запрос.Выполнить();

		Если ИмяСправочника <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапросаДляОбновления(МассивКолонок, ПараметрыФайла.ИмяБезРасширения, ИмяСправочника);
			Запрос.Текст = ТекстЗапроса;
		КонецЕсли;

	КонецЕсли;

	ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Справочники[ИмяСправочника],
							 ,
							 СтрШаблон("Завершение загрузки файла %1", ИмяФайла));

	Возврат Результат;

КонецФункции

// Конструктор таблицы свойств и значений для дополнительных реквизитов и сведений
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - Свойство
// * Значение - Произвольный - Значение
// * ТекстоваяСтрока - Строка - Текстовая строка
Функция ТаблицаСвойствИЗначений() Экспорт

	ТаблицаСвойствИЗначений = Новый ТаблицаЗначений;
	ТаблицаСвойствИЗначений.Колонки.Добавить("Свойство",
											 Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблицаСвойствИЗначений.Колонки.Добавить("Значение");
	ТаблицаСвойствИЗначений.Колонки.Добавить("ТекстоваяСтрока");

	Возврат ТаблицаСвойствИЗначений

КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив с разобранной строкой
// 
// Параметры:
// 	Строка - Строка - Разделяемая строка
// 	Разделитель - Строка - Строка символов, служащая разделителем
// 	УдалитьКавычки - Булево - Признак удаления парных первых и последних кавычек или апострофов
// 	КорректироватьUNIXПоследовательности - Булево - Признак исправления последовательностей \' и \"
// 	ИгнорироватьNULL - Булево - Признак замены строк "NULL" на "0"
// Возвращаемое значение:
// 	Массив - массив подстрок
Функция СтрВМассив(Строка,
				   Разделитель,
				   УдалитьКавычки = Истина,
				   КорректироватьUNIXПоследовательности = Истина,
				   ИгнорироватьNULL = Истина)

	Символ1 = "\'";
	Замена1 = "'";
	Символ2 = "\""";
	Замена2 = """";

	Кавычки1 = "'";
	Кавычки2 = """";

	Если ИгнорироватьNULL Тогда
		Строка = СтрЗаменить(Строка, ",NULL", ",''");
	КонецЕсли;

	//	Корректировка UNIX-последовательностей
	Если КорректироватьUNIXПоследовательности Тогда
		Строка = СтрЗаменить(Строка, Символ1, Замена1);
		Строка = СтрЗаменить(Строка, Символ2, Замена2);
	КонецЕсли;

	Если УдалитьКавычки И ((СтрНачинаетсяС(Строка, Кавычки1) И СтрЗаканчиваетсяНа(Строка, Кавычки1))
						   Или (СтрНачинаетсяС(Строка, Кавычки2) И СтрЗаканчиваетсяНа(Строка, Кавычки2))) Тогда
		Строка = Сред(Строка, 2, СтрДлина(Строка) - 2);
	КонецЕсли;

	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, Разделитель,, Истина);

	Возврат МассивПодстрок;

КонецФункции

// Возвращает текст запроса для помещения таблицы во временную таблицу запроса
// 
// Параметры:
// 	МассивКолонок - Массив - Массив, содержащий наименования колонок таблицы
// 	НаименованиеТаблицы - Строка - Наименование временной таблицы
// Возвращаемое значение:
// 	Строка - Текст запроса
Функция ТекстЗапросаДляВТ(Знач МассивКолонок, НаименованиеТаблицы)

	ИндексПоследнейКолонки = МассивКолонок.Количество() - 1;

	ДляЗапроса = Новый Массив;

	ДляЗапроса.Добавить("ВЫБРАТЬ ");
	ДляЗапроса.Добавить(Символы.ПС);

	Для Индекс = 0 По ИндексПоследнейКолонки Цикл
		ДляЗапроса.Добавить("Таб.");
		ДляЗапроса.Добавить(МассивКолонок[Индекс]);
		ДляЗапроса.Добавить(" КАК ");
		ДляЗапроса.Добавить(МассивКолонок[Индекс]);
		Если Индекс <> ИндексПоследнейКолонки Тогда
			ДляЗапроса.Добавить(",");
		КонецЕсли;
		ДляЗапроса.Добавить(Символы.ПС);
	КонецЦикла;

	ДляЗапроса.Добавить(" ПОМЕСТИТЬ ");
	ДляЗапроса.Добавить(НаименованиеТаблицы);
	ДляЗапроса.Добавить(" из &Таб КАК Таб");

	ТекстЗапроса = СтрСоединить(ДляЗапроса);
	Возврат ТекстЗапроса

КонецФункции

#Область ТекстЗапросаДляОбновления
// Возвращает текст запроса для обновления справочника
//
// Для справочника КА2_Марки формирует следующий запрос: 
//	"ВЫБРАТЬ 
//	car_mark.Код КАК Код,
//	car_mark.Наименование КАК Наименование,
//	car_mark.name_rus КАК name_rus,
//	car_mark.date_create КАК date_create,
//	car_mark.date_update КАК date_update,
//	car_mark.id_car_type КАК id_car_type,
//	КА2_Марки.Ссылка КАК Ссылка
//	ИЗ
//	car_mark КАК car_mark
//	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КА2_Марки КАК КА2_Марки
//	ПО КА2_Марки.Код = car_mark.Код
//	ГДЕ
//	car_mark.Наименование <> КА2_Марки.Наименование
//		ИЛИ car_mark.name_rus <> КА2_Марки.name_rus
//		ИЛИ car_mark.date_create <> КА2_Марки.date_create
//		ИЛИ car_mark.date_update <> КА2_Марки.date_update
//		ИЛИ car_mark.id_car_type <> КА2_Марки.id_car_type
//		ИЛИ КА2_Марки.Код ЕСТЬ NULL
//	;
//	////////////////////////////////////////////////////////////////////////////////
//	ВЫБРАТЬ РАЗЛИЧНЫЕ
//	КА2_КлючиМоделей.Ссылка КАК Ссылка
//	ИЗ
//	car_mark КАК car_mark
//	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КА2_Марки КАК КА2_Марки
//	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КА2_КлючиМоделей КАК КА2_КлючиМоделей
//	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КА2_КлючиМоделейОбновить КАК КА2_КлючиМоделейОбновить
//	ПО КА2_КлючиМоделейОбновить.КлючМодели = КА2_КлючиМоделей.Ссылка
//	ПО КА2_КлючиМоделей.Марка = КА2_Марки.Ссылка
//	ПО КА2_Марки.Код = car_mark.Код
//	ГДЕ
//	НЕ КА2_Марки.Код ЕСТЬ NULL
//	И КА2_КлючиМоделейОбновить.КлючМодели ЕСТЬ NULL"
//	
// Параметры:
// 	МассивКолонок - Массив - Массив, содержащий наименования колонок таблицы
// 	ИмяТаблицы - Строка - Наименование временной таблицы
// 	ИмяСправочника - Строка - Наименование справочника
// Возвращаемое значение:
// 	Строка - Текст запроса
Функция ТекстЗапросаДляОбновления(Знач МассивКолонок, ИмяТаблицы, ИмяСправочника)

	ДляЗапроса = Новый Массив;

	СекцияВЫБРАТЬПервогоЗапроса(ДляЗапроса, МассивКолонок, ИмяСправочника, ИмяТаблицы);
	СекцияИЗПервогоЗапроса(ДляЗапроса, ИмяСправочника, ИмяТаблицы);
	СекцияГДЕПервогоЗапроса(ДляЗапроса, МассивКолонок, ИмяСправочника, ИмяТаблицы);

	РазделительЗапросов(ДляЗапроса);

	СекцияВЫБРАТЬВторогоЗапроса(ДляЗапроса);
	СекцияИЗВторогоЗапроса(ДляЗапроса, ИмяСправочника, ИмяТаблицы);
	СекцияГДЕВторогоЗапроса(ДляЗапроса, ИмяСправочника);

	ТекстЗапроса = СтрСоединить(ДляЗапроса);

	Возврат ТекстЗапроса;

КонецФункции

Процедура СекцияВЫБРАТЬПервогоЗапроса(ДляЗапроса, МассивКолонок, ИмяСправочника, ИмяТаблицы)
	ДляЗапроса.Добавить("ВЫБРАТЬ ");
	ДляЗапроса.Добавить(Символы.ПС);

	Для Индекс = 0 По МассивКолонок.ВГраница() Цикл
		ДляЗапроса.Добавить(ИмяТаблицы);
		ДляЗапроса.Добавить(".");
		ДляЗапроса.Добавить(МассивКолонок[Индекс]);
		ДляЗапроса.Добавить(" КАК ");
		ДляЗапроса.Добавить(МассивКолонок[Индекс]);
		ДляЗапроса.Добавить(",");
		ДляЗапроса.Добавить(Символы.ПС);
	КонецЦикла;

	ДляЗапроса.Добавить(ИмяСправочника);
	ДляЗапроса.Добавить(".Ссылка КАК Ссылка");
	ДляЗапроса.Добавить(Символы.ПС);
КонецПроцедуры

Процедура СекцияИЗПервогоЗапроса(ДляЗапроса, ИмяСправочника, ИмяТаблицы)
	ДляЗапроса.Добавить("ИЗ");
	ДляЗапроса.Добавить(Символы.ПС);
	ДляЗапроса.Добавить(ИмяТаблицы);
	ДляЗапроса.Добавить(" КАК ");
	ДляЗапроса.Добавить(ИмяТаблицы);
	ДляЗапроса.Добавить(Символы.ПС);
	ДляЗапроса.Добавить("ЛЕВОЕ СОЕДИНЕНИЕ Справочник.");
	ДляЗапроса.Добавить(ИмяСправочника);
	ДляЗапроса.Добавить(" КАК ");
	ДляЗапроса.Добавить(ИмяСправочника);
	ДляЗапроса.Добавить(Символы.ПС);
	ДляЗапроса.Добавить("ПО ");
	ДляЗапроса.Добавить(ИмяСправочника);
	ДляЗапроса.Добавить(".Код = ");
	ДляЗапроса.Добавить(ИмяТаблицы);
	ДляЗапроса.Добавить(".Код");
	ДляЗапроса.Добавить(Символы.ПС);
КонецПроцедуры

Процедура СекцияГДЕПервогоЗапроса(ДляЗапроса, МассивКолонок, ИмяСправочника, ИмяТаблицы)
	Перем ПервоеУсловие;
	Перем Индекс;
	ПервоеУсловие = Истина;

	ДляЗапроса.Добавить("ГДЕ");
	ДляЗапроса.Добавить(Символы.ПС);

	Для Индекс = 0 По МассивКолонок.ВГраница() Цикл
		Если МассивКолонок[Индекс] <> "Код" Тогда

			Если Не ПервоеУсловие Тогда
				ДляЗапроса.Добавить("	ИЛИ ");
			Иначе
				ПервоеУсловие = Ложь;
			КонецЕсли;

			ДляЗапроса.Добавить(ИмяТаблицы);
			ДляЗапроса.Добавить(".");
			ДляЗапроса.Добавить(МассивКолонок[Индекс]);
			ДляЗапроса.Добавить(" <> ");
			ДляЗапроса.Добавить(ИмяСправочника);
			ДляЗапроса.Добавить(".");
			ДляЗапроса.Добавить(МассивКолонок[Индекс]);
			ДляЗапроса.Добавить(Символы.ПС);

		КонецЕсли;
	КонецЦикла;
	ДляЗапроса.Добавить("	ИЛИ ");
	ДляЗапроса.Добавить(ИмяСправочника);
	ДляЗапроса.Добавить(".Код ЕСТЬ NULL");
КонецПроцедуры

Процедура РазделительЗапросов(ДляЗапроса)
//	ДляЗапроса.Добавить(Символы.ПС);
//	ДляЗапроса.Добавить(";");
//	ДляЗапроса.Добавить(Символы.ПС);
//	ДляЗапроса.Добавить("////////////////////////////////////////////////////////////////////////////////");
	ДляЗапроса.Добавить(ОбщегоНазначения.РазделительПакетаЗапросов());
КонецПроцедуры

Процедура СекцияВЫБРАТЬВторогоЗапроса(ДляЗапроса)
	ДляЗапроса.Добавить("ВЫБРАТЬ РАЗЛИЧНЫЕ");
	ДляЗапроса.Добавить(Символы.ПС);
	ДляЗапроса.Добавить("КА2_КлючиМоделей.Ссылка КАК Ссылка");
	ДляЗапроса.Добавить(Символы.ПС);
КонецПроцедуры

Процедура СекцияИЗВторогоЗапроса(ДляЗапроса, ИмяСправочника, ИмяТаблицы)
	Перем ПоляКлюча;
	ПоляКлюча = ПараметрыСеанса.КА2_ПоляКлючейМоделей;

	ДляЗапроса.Добавить("ИЗ");
	ДляЗапроса.Добавить(Символы.ПС);
	ДляЗапроса.Добавить(ИмяТаблицы);
	ДляЗапроса.Добавить(" КАК ");
	ДляЗапроса.Добавить(ИмяТаблицы);
	ДляЗапроса.Добавить(Символы.ПС);
	ДляЗапроса.Добавить("ЛЕВОЕ СОЕДИНЕНИЕ Справочник.");
	ДляЗапроса.Добавить(ИмяСправочника);
	ДляЗапроса.Добавить(" КАК ");
	ДляЗапроса.Добавить(ИмяСправочника);
	ДляЗапроса.Добавить(Символы.ПС);
	ДляЗапроса.Добавить("ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КА2_КлючиМоделей КАК КА2_КлючиМоделей");
	ДляЗапроса.Добавить(Символы.ПС);
	ДляЗапроса.Добавить("ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КА2_КлючиМоделейОбновить КАК КА2_КлючиМоделейОбновить");
	ДляЗапроса.Добавить(Символы.ПС);
	ДляЗапроса.Добавить("ПО КА2_КлючиМоделейОбновить.КлючМодели = КА2_КлючиМоделей.Ссылка");
	ДляЗапроса.Добавить(Символы.ПС);
	ДляЗапроса.Добавить("ПО КА2_КлючиМоделей.");
	ДляЗапроса.Добавить(ПоляКлюча[ИмяСправочника]);
	ДляЗапроса.Добавить(" = ");
	ДляЗапроса.Добавить(ИмяСправочника);
	ДляЗапроса.Добавить(".Ссылка");
	ДляЗапроса.Добавить(Символы.ПС);
	ДляЗапроса.Добавить("ПО ");
	ДляЗапроса.Добавить(ИмяСправочника);
	ДляЗапроса.Добавить(".Код = ");
	ДляЗапроса.Добавить(ИмяТаблицы);
	ДляЗапроса.Добавить(".Код");
	ДляЗапроса.Добавить(Символы.ПС);
КонецПроцедуры

Процедура СекцияГДЕВторогоЗапроса(ДляЗапроса, ИмяСправочника)
	ДляЗапроса.Добавить("ГДЕ");
	ДляЗапроса.Добавить(Символы.ПС);
	ДляЗапроса.Добавить("НЕ ");
	ДляЗапроса.Добавить(ИмяСправочника);
	ДляЗапроса.Добавить(".Код ЕСТЬ NULL");
	ДляЗапроса.Добавить(Символы.ПС);
	ДляЗапроса.Добавить("И КА2_КлючиМоделейОбновить.КлючМодели ЕСТЬ NULL");
КонецПроцедуры

#КонецОбласти
#КонецОбласти